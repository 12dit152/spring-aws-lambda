name: Build and Upload JAR to S3 (OIDC), Deploy to Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'pom.xml'
  workflow_dispatch:  # enables manual trigger

permissions:
  id-token: write        # required for OIDC
  contents: read         # allows checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    # if: "!contains(github.event.head_commit.message, 'dependabot')"

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven

      - name: Build the JAR
        run: mvn clean package -DskipTests

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::897729105223:role/GitHubOIDCDeployRole
          aws-region: eu-west-1

      - name: Upload to S3
        run: |
          JAR_NAME="spring-lambda-hello-1.0.${{ github.run_number }}.jar"
          cp target/spring-lambda-hello-1.0.0-SNAPSHOT.jar target/$JAR_NAME
          aws s3 cp target/$JAR_NAME s3://maven-releases-897729105223-eu-west-1/builds/

      - name: Deploy Lambda with Validation
        run: |
          JAR_NAME="spring-lambda-hello-1.0.${{ github.run_number }}.jar"
          
          # Update function code
          aws lambda update-function-code \
            --function-name spring-lambda-hello \
            --s3-bucket maven-releases-897729105223-eu-west-1 \
            --s3-key builds/$JAR_NAME
          
          # Wait for update to complete
          aws lambda wait function-updated \
            --function-name spring-lambda-hello
          
          # Publish new version
          VERSION=$(aws lambda publish-version \
            --function-name spring-lambda-hello \
            --description "Build ${{ github.run_number }}" \
            --query 'Version' --output text)
          
          # Test the new version
          aws lambda invoke \
            --function-name spring-lambda-hello:$VERSION \
            --payload '{"resource":"/api/v1/hello","path":"/api/v1/hello","httpMethod":"GET","requestContext":{"resourcePath":"/api/v1/hello","httpMethod":"GET","requestId":"test-123","identity":{"sourceIp":"127.0.0.1"}},"isBase64Encoded":false}' \
            response.json
          
          # Only if test passes, update alias
          if [ $? -eq 0 ]; then
            echo "Version $VERSION validation passed, updating alias..."
            aws lambda update-alias \
              --function-name spring-lambda-hello \
              --name dev \
              --function-version $VERSION
            echo "Deployed version $VERSION to dev alias"
          else
            echo "Version $VERSION failed validation"
            exit 1
          fi

      - name: Cleanup old versions and JARs
        run: |
          # Cleanup old Lambda versions (keep latest 2 numbered versions)
          aws lambda list-versions-by-function \
            --function-name spring-lambda-hello \
            --query 'Versions[?Version!=`$LATEST`].Version' \
            --output text | \
          tr '\t' '\n' | \
          sort -nr | \
          tail -n +3 | \
          while read version; do
            echo "Deleting Lambda version: $version"
            aws lambda delete-function \
              --function-name spring-lambda-hello:$version
          done
          
          # Cleanup old JAR files (keep latest 2)
          aws s3api list-objects-v2 \
            --bucket maven-releases-897729105223-eu-west-1 \
            --prefix builds/spring-lambda-hello- \
            --query 'Contents[?ends_with(Key, `.jar`)].[Key,LastModified]' \
            --output text | \
          sort -k2 -r | \
          tail -n +3 | \
          cut -f1 | \
          while read key; do
            echo "Deleting old JAR: $key"
            aws s3 rm "s3://maven-releases-897729105223-eu-west-1/$key"
          done
